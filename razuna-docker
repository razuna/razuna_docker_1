#!/usr/bin/env node

// Require
var shelljs = require('shelljs');
var colors = require('colors');
var getUsage = require('command-line-usage');
var actions = require('./scripts/actions');
var package = require('./package');

// Parse arguments
var args = require('minimist')(process.argv.slice(2));

// Shell vars
var _root = shelljs.exec('[[ $EUID ]]').code;

// Let's check that we run as root
if (_root !== 0) {
	console.log('This script must be run as root. Please sudo or log in as root first!'.red);
	shelljs.exit(1);
}

// Let's check that Docker is installed
if (!shelljs.which('docker')) {
	console.log('Looks like Docker is not installed on your system. Please make sure to install Docker first and then run this script again!'.yellow);
	shelljs.exit(1);
}

// Let's check that git is installed
if (!shelljs.which('git')) {
	console.log('Looks like Git is not installed on your system. Please make sure to install Git first and then run this script again!'.yellow);
	shelljs.exit(1);
}

// All tests passes. Let's continue...



// Check that default argument is here
var _cmd = args._;
var _cmd_string = _cmd[0];
var _c = args.c && args.c.length ? args.c : false;
var _n = args.n ? args.n : false;
var _m = args.m ? args.m : false;

// No command given. Output help
if ( !_cmd.length ) {
	outputHelp(); 
}
// if the volumes are not defined or have no length
// else if ( _cmd_string === 'start' && (!_v || !_vl) ) {
// 	outputHelp(); 
// }

// Decide on command
if ( _cmd_string === 'build' ) {
	actions.build();
}
else if ( _cmd_string === 'run' ) {
	if ( !_c ) {
		_c = 'default.json';
	}
	console.log('We are creating a new Razuna Docker container with the config file: ' + _c.green);
	actions.run(_c, _n, _m);
}
else if ( _cmd_string === 'start' ) {
	actions.start();
}
else if ( _cmd_string === 'stop' ) {
	console.log('Stopping the Razuna Docker container. Please wait.'.blue)
	actions.stop();
}
else if ( _cmd_string === 'destroy' ) {
	console.log('Stopping the Razuna Docker container and removing it. Please wait.'.blue)
	actions.destroy();
}
else if ( _cmd_string === 'cleanup' ) {
	console.log('Removing all docker containers which are older than a week and not running. This will also remove all untagged images. Please wait.'.blue)
	actions.cleanup();
}
else if ( _cmd_string === 'logs' ) {
	console.log('Showing the logs to the Razuna Docker container. Please wait.'.blue)
	actions.logs();
}
else {
	outputHelp(); 
}




function outputHelp() {
	var sections = [
		{
			header: 'Razuna Docker Help',
			content: 'This is the help for runing the razuna_docker script'
		},
		{
			header: 'Commands',
			content: [
				{
					name: 'build',
					summary: 'Build or re-build the Razuna Docker Container'
				},
				{
					name: 'run [-c config file] [-n] [-m]',
					summary: 'Start a new Razuna Docker Container.\nOptions:\n-c config_file (default: default.json)\n-n (with Nginx)\n-m (with MySQL)'
				},
				{
					name: 'start',
					summary: 'Start the existing Razuna Docker Container.'
				},
				{
					name: 'stop',
					summary: 'Stops the Razuna Docker Container'
				},
				{
					name: 'destroy',
					summary: 'Stops and removes the Razuna Docker Container'
				},
				{
					name: 'cleanup',
					summary: 'Removing all docker containers which are older than a week and not running. This will also remove all untagged images.'
				},
				{
					name: 'logs',
					summary: 'View the docker logs for the Razuna Docker Container.'
				},
				{
					name: 'help', 
					summary: 'Print this usage guide'
				}
			]
		},
		{
			header: 'Examples',
			content: [
				{ 
					name: 'razuna-docker build'
				},
				{ 
					name: 'razuna-docker run (with any arguments start with the default settings)'
				},
				{ 
					name: 'razuna-docker run -c myconfig.json'
				},
				{ 
					name: 'razuna-docker run -c myconfig.json -n -m (runs the container with Nginx and MySQL)'
				},
				{ 
					name: 'razuna-docker start'
				},
				{ 
					name: 'razuna-docker stop'
				},
				{ 
					name: 'razuna-docker destroy'
				},
				{ 
					name: 'razuna-docker cleanup'
				},
				{ 
					name: 'razuna-docker logs'
				},
			]
		},
		{
			header: 'NOTE',
			content: [
				{
					desc: 'In order to have persistant data you need to store data from the container on your host. By default we store all data in the "shared" directory of this scripts path. If you would like to change the path to the storage you can edit the config files in the directory "configuration". After you have made changes you need to rebuild the Razuna Docker image!!!!\n\n',
				},
				{
					desc: 'The run options -n (Nginx) and -m (MySQL) will only take effect if your Razuna Docker image has been build with Nginx and/or MySQL.\n\n',
				},
				{
					desc: 'Developers: Set the dev_mode to true and define the path to your source code directory on your host in the default.json configuration.\n\n',
				}
				,
				{
					desc: 'Report any issues or feedback at https://github.com/razuna/razuna_docker_1',
				}
			]
		}
	];
	var usage = getUsage(sections);
	console.log(usage);
	shelljs.exit(1);
}
